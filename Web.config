<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <configSections>
    <section name="dasBlog.Runtime" type="newtelligence.DasBlog.Runtime.Configuration.RuntimeSection, newtelligence.DasBlog.Runtime" requirePermission="false" />
    <sectionGroup name="dasBlog.Storage" type="dasBlog.Storage.Configuration.dasBlogStorageSectionGroup, dasBlog.Storage" >
      <section name="userNameCredentials" type="dasBlog.Storage.Configuration.UserNameCredentialsSection, dasBlog.Storage" requirePermission="false" />
      <section name="nodes" type="dasBlog.Storage.Configuration.NodesSection, dasBlog.Storage" requirePermission="false"/>
      <section name="uriLayouts" type="dasBlog.Storage.Configuration.UriLayoutsSection, dasBlog.Storage" requirePermission="false"/>
      <section name="storageBus" type="dasBlog.Storage.Configuration.StorageBusSection, dasBlog.Storage" requirePermission="false"/>
    </sectionGroup>
    <!-- USED FOR CUSTOM MACROS ONLY
        <section requirePermission="false" name="newtelligence.DasBlog.Macros" type="newtelligence.DasBlog.Web.Core.MacroSectionHandler, newtelligence.DasBlog.Web.Core" /> -->
    <section requirePermission="false" name="newtelligence.ControlImages" type="newtelligence.DasBlog.Web.Core.WebControls.ControlImageModuleSectionHandler, newtelligence.DasBlog.Web.Core" />
    <section requirePermission="false" name="newtelligence.DasBlog.UrlMapper" type="newtelligence.DasBlog.Web.Core.UrlMapperModuleSectionHandler, newtelligence.DasBlog.Web.Core" />
    <!-- http compression handler section -->
    <sectionGroup name="blowery.web">
      <section requirePermission="false" name="httpCompress" type="blowery.Web.HttpCompress.SectionHandler, blowery.Web.HttpCompress" />
    </sectionGroup>
    <sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
      <sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
        <section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" />
        <sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
          <section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere" />
          <section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" />
          <section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" />
          <section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication" />
        </sectionGroup>
      </sectionGroup>
    </sectionGroup>
  </configSections>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="FreeTextBox" publicKeyToken="5962a4e684a48b87" culture="neutral" />
        <bindingRedirect oldVersion="3.0.5000.0-3.0.5000.6" newVersion="3.1.6.35504" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <!-- USED FOR CUSTOM MACROS ONLY
    <newtelligence.DasBlog.Macros>
		<add macro="foo" type="FooMacroPlugin.FooMacros,FooMacroPlugin"/>
    </newtelligence.DasBlog.Macros> -->
  <newtelligence.ControlImages>
    <add type="newtelligence.DasBlog.Web.Core.WebControls.ShadowBox" name="shadowbox" />
  </newtelligence.ControlImages>
  <newtelligence.DasBlog.UrlMapper>
    <add matchExpression="(?&lt;basedir&gt;.*?)/atom\.ashx" mapTo="{basedir}/webservices.svc/feed?format=atom" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/rss\.as[hp]x" mapTo="{basedir}/webservices.svc/feed?format=rss" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/aggbug\.ashx" mapTo="{basedir}/webservices.svc/aggbug" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/ct\.ashx" mapTo="{basedir}/webservices.svc/ct" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/cptrk\.ashx" mapTo="{basedir}/webservices.svc/cptrk" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/deleteItem\.ashx" mapTo="{basedir}/webservices.svc/deleteItem" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/approveItem\.ashx" mapTo="{basedir}/webservices.svc/approveItem" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/cdf\.ashx" mapTo="{basedir}/webservices.svc/feed?format=cdf" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/blogger\.aspx" mapTo="{basedir}/blogger.svc" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/pingback\.aspx" mapTo="{basedir}/pingback.svc" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/trackback\.aspx" mapTo="{basedir}/webservices.svc/trackback" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/autoSaveEntry\.ashx" mapTo="{basedir}/webservices.svc/autoSave" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/microsummary\.ashx" mapTo="{basedir}/webservices.svc/microsummary" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/googleSitemap\.ashx" mapTo="{basedir}/webservices.svc/sitemap" />
    <add matchExpression="(?&lt;basedir&gt;.*?)/timeline\.ashx" mapTo="{basedir}/webservices.svc/timeline" />

    <!-- TSC: LINK rewriting -->
    <add matchExpression="LINKRW(?&lt;site&gt;.+).aspx\?(?&lt;param&gt;.+)=(?&lt;value&gt;.+)" mapTo="{site},{param},{value}.aspx" />
    <!-- TSC: URL rewriting -->
    <!-- (?<basedir>.*?)/(?<site>.*?),(?<param>.*?),(?<value>.+)\.aspx -->
    <add matchExpression="(?&lt;basedir&gt;.*?)/(?&lt;site&gt;.*?),(?&lt;param&gt;.*?),(?&lt;value&gt;.+)\.aspx" mapTo="{basedir}/{site}.aspx?{param}={value}" />
    <!-- .TEXT archive compatibility -->
    <!-- Translates
				FROM: /blog/archive/2004/07/27/194.aspx
                  TO: /blog/default.aspx?date=2004-07-27
        -->
    <add matchExpression="(?&lt;basedir&gt;.*?)/archive/(?&lt;year&gt;\d{4})/(?&lt;month&gt;\d{2})/(?&lt;day&gt;\d{2})/(?&lt;postid&gt;\d+)\.aspx" mapTo="{basedir}/default.aspx?date={year}-{month}-{day}" />
    <!-- .TEXT archive compatibility -->
    <!-- ALTERNATIVE: Translates
				FROM: /blog/archive/2004/07/27/194.aspx
                  TO: /blog/permalink.aspx?guid=194
        -->
    <!-- 
        <add matchExpression="(?&lt;basedir&gt;.*?)/archive/(?&lt;year&gt;\d{4})/(?&lt;month&gt;\d{2})/(?&lt;day&gt;\d{2})/(?&lt;postid&gt;\d+)\.aspx"
            mapTo="{basedir}/permalink.aspx?guid={postid}" />        
-->
  </newtelligence.DasBlog.UrlMapper>
  <!-- config section for my http module -->
  <blowery.web>
    <!-- Here's an example on how to change the algorithm or compression level
		<compressionModule preferredAlgorithm="deflate|gzip" compressionLevel="high|normal|low"/>
		so, to use deflate by default, and high compression, you would use the following line 
		-->
    <httpCompress preferredAlgorithm="gzip" compressionLevel="high">
      <excludedMimeTypes>
        <add type="image/jpeg" />
        <add type="image/gif" />
      </excludedMimeTypes>
      <excludedPaths>
        <add path="WebResource.axd" />
        <add path="ebResource.axd" />
      </excludedPaths>
    </httpCompress>
  </blowery.web>
  <system.diagnostics>
    <assert assertuienabled="false" />
    <sources>
      <source name="System.ServiceModel" switchValue="Warning,ActivityTracing" propagateActivity="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" switchValue="Verbose,ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="C:\DasBlog.SF\branches\Prototype 3.5\source\newtelligence.DasBlog.Web\Web_tracelog.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="C:\DasBlog.SF\branches\Prototype 3.5\source\newtelligence.DasBlog.Web\Web_messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
  </system.diagnostics>
  <system.web>
    <roleManager enabled="true" defaultProvider="dasBlog">
      <providers>
        <add name="dasBlog" type="newtelligence.DasBlog.Web.Core.SiteSecurityRoleProvider, newtelligence.DasBlog.Web.Core" />
      </providers>
    </roleManager>
    <membership defaultProvider="dasBlog">
      <providers>
        <add name="dasBlog" type="newtelligence.DasBlog.Web.Core.SiteSecurityMembershipProvider, newtelligence.DasBlog.Web.Core" />
      </providers>
    </membership>
    <profile inherits="newtelligence.DasBlog.Web.Core.UserProfile, newtelligence.DasBlog.Web.Core"
             defaultProvider="dasBlog">
      <providers>
        <add name="dasBlog" type="newtelligence.DasBlog.Web.Core.SiteSecurityProfileProvider, newtelligence.DasBlog.Web.Core" />
      </providers>
    </profile>
    <trust level="Full" originUrl="" />
    <!--  level="[Full|High|Medium|Low|Minimal]" -->
    <!-- <trust level="High" originUrl=""/>  -->
    <!--  DYNAMIC DEBUG COMPILATION
          Set compilation debug="true" to enable ASPX debugging.  Otherwise, setting this value to
          false will improve runtime performance of this application. 
          Set compilation debug="true" to insert debugging symbols (.pdb information)
          into the compiled page. Because this creates a larger file that executes
          more slowly, you should set this value to true only when debugging and to
          false at all other times. For more information, refer to the documentation about
          debugging ASP .NET files.
    -->
    <compilation defaultLanguage="c#" debug="true">
      <assemblies>
        <add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
      </assemblies>
    </compilation>
    <!--  CUSTOM ERROR MESSAGES
          Set customError mode values to control the display of user-friendly  
          error messages to users instead of error details (including a stack trace):

          "On" Always display custom (friendly) messages   
          "Off" Always display detailed ASP.NET error information.
          "RemoteOnly" Display custom (friendly) messages only to users not running 
          on the local Web server. This setting is recommended for security purposes, so 
          that you do not display application detail information to remote clients.
    -->
    <customErrors mode="Off" />
    <!-- ***IMPORTANT*** If you are using ASP.NET 2.0 to host dasBlog
			                     you must uncomment the httpCookies section below, 
			                     as dasBlog was written for ASP.NET 1.1 and will
			                     automatically add the HttpOnly flag to cookies automatically -->
    <!-- <httpCookies httpOnlyCookies="false"/> -->
    <authentication mode="Forms">
      <!-- NOTE: If you want to run MULTIPLE dasBlogs on the SAME Domain Name
			     include the path in each blog's Web.Config like path="/dasblog1" and path="/yoursite"
			     as appropriate. -->
      <forms name=".DASBLOGAUTH" protection="All" timeout="60" path="/" cookieless="UseCookies" />
    </authentication>
    <!--
        If your ISP/Hoster supports ASP.NET impersonation, they are likley
        setting this to true in their machine.config. You should not set it to true
        unless you know that dasBlog will have the correct permissions
       
        <identity impersonate="false" />
        -->
    <httpRuntime useFullyQualifiedRedirectUrl="true" />
    <!--  APPLICATION-LEVEL TRACE LOGGING
          Application-level tracing enables trace log output for every page within an application. 
          Set trace enabled="true" to enable application trace logging.  If pageOutput="true", the
          trace information will be displayed at the bottom of each page.  Otherwise, you can view the 
          application trace log by browsing the "trace.axd" page from your web application
          root. 
    -->
    <trace enabled="false" requestLimit="1000" pageOutput="true" traceMode="SortByTime" localOnly="true" />
    <!--  SESSION STATE SETTINGS
          By default ASP .NET uses cookies to identify which requests belong to a particular session. 
          If cookies are not available, a session can be tracked by adding a session identifier to the URL. 
          To disable cookies, set sessionState cookieless="true".
    -->
    <sessionState mode="InProc" stateConnectionString="tcpip=127.0.0.1:42424" sqlConnectionString="data source=127.0.0.1;user id=sa;password=" cookieless="false" timeout="20" />
    <!--  GLOBALIZATION
          This section sets the globalization settings of the application. 
    -->
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" />
    <pages validateRequest="true">
      <controls>
        <add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      </controls>
    </pages>
    <httpHandlers>
      <add verb="GET" path="CaptchaImage.aspx" type="WebControlCaptcha.CaptchaImageHandler, WebControlCaptcha" />
      <add verb="*" path="*.blogtemplate" type="System.Web.HttpForbiddenHandler" />
      <remove verb="*" path="*.asmx" />
      <add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add verb="GET,HEAD" path="ScriptResource.axd" validate="false" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
    </httpHandlers>
    <httpModules>
      <add type="newtelligence.DasBlog.Web.Core.UrlMapperModule, newtelligence.DasBlog.Web.Core" name="UrlMapperModule" />
      <add type="newtelligence.DasBlog.Web.Core.TitleMapperModule, newtelligence.DasBlog.Web.Core" name="TitleMapperModule" />
      <add type="newtelligence.DasBlog.Web.Core.ProfileMapperModule, newtelligence.DasBlog.Web.Core" name="ProfileMapperModule" />
      <add type="newtelligence.DasBlog.Web.Core.WebControls.ControlImageModule, newtelligence.DasBlog.Web.Core" name="ControlImageModule" />
      <add type="blowery.Web.HttpCompress.HttpModule, blowery.web.HttpCompress" name="CompressionModule" />
      <add type="newtelligence.DasBlog.Web.Core.IPBlackList, newtelligence.DasBlog.Web.Core" name="IPBlackList" />
      <add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
    </httpModules>
    <xhtmlConformance mode="Legacy" />
  </system.web>
  <!--<system.codedom>
			<compilers>
				<compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CSharp.CSharpCodeProvider,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4" compilerOptions="/warnaserror-">
					<providerOption name="CompilerVersion" value="v3.5"/></compiler></compilers></system.codedom>-->
  <!--
		The system.webServer section is required for running ASP.NET AJAX under Internet
		Information Services 7.0. It is not necessary for previous version of IIS.
	-->
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <modules>
      <add name="ScriptModule" preCondition="integratedMode" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add name="UrlMapper" type="newtelligence.DasBlog.Web.Core.UrlMapperModule" />
      <add name="TitleMapper" type="newtelligence.DasBlog.Web.Core.TitleMapperModule" />
      <add type="newtelligence.DasBlog.Web.Core.ProfileMapperModule, newtelligence.DasBlog.Web.Core" name="ProfileMapperModule" />
      <add type="newtelligence.DasBlog.Web.Core.WebControls.ControlImageModule, newtelligence.DasBlog.Web.Core" name="ControlImageModule" />
      <!--<add type="blowery.Web.HttpCompress.HttpModule, blowery.web.HttpCompress" name="CompressionModule" />-->
      <add type="newtelligence.DasBlog.Web.Core.IPBlackList, newtelligence.DasBlog.Web.Core" name="IPBlackList" />
    </modules>
    <handlers>
      <remove name="WebServiceHandlerFactory-Integrated" />
      <add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      <add name="ScriptResource" verb="GET,HEAD" path="ScriptResource.axd" preCondition="integratedMode" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
    </handlers>
  </system.webServer>
  <system.serviceModel>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="true" />
    <behaviors>
      <serviceBehaviors>
        <behavior name="ConfigEditServiceBehavior">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
        <behavior name="EditServiceBehavior">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service behaviorConfiguration="ConfigEditServiceBehavior"
        name="ConfigEditService">
        <endpoint address="" binding="basicHttpBinding" contract="IConfigEditService" />
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
      </service>
      <service behaviorConfiguration="EditServiceBehavior"
        name="EditService">
        <endpoint address="" binding="basicHttpBinding" contract="IEditService" />
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
      </service>
    </services>
  </system.serviceModel>
  <dasBlog.Storage>
    <!-- Encrypted Username/Password credentials for clients and providers -->
    <userNameCredentials>
      <userNameCredential name="flickr" username="flickrAccount" password="00-00-00-00-00-00-00-00" />
      <userNameCredential name="relay" username="relayAccount" password="00-00-00-00-00-00-00-00" />
      <userNameCredential name="silverlight" username="silverlightAccount" password="00-00-00-00-00-00-00-00" />
      <userNameCredential name="facebook" username="facebookAccount" password="00-00-00-00-00-00-00-00" />
      <userNameCredential name="linkedin" username="linkedinAccount" password="00-00-00-00-00-00-00-00" />
    </userNameCredentials>
    <!-- Definition of local and remote storage nodes -->
    <nodes>
      <!-- TextEntry provider on local SQLCE store -->
      <node name="textSql"
           provider="dasBlog.Storage.SqlServer.TextEntryStorageProvider, dasBlog.Storage.SqlServer"
           initData="Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\dasBlogStorageSql.mdf;Integrated Security=True;User Instance=True"/>
      <!-- LogEntry provider on local SQLCE store -->
      <node name="logSql"
           provider="dasBlog.Storage.SqlServer.LogDataStorageProvider, dasBlog.Storage.SqlServer"
           initData="Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\dasBlogStorageSql.mdf;Integrated Security=True;User Instance=True"/>
      <!-- EventEntry provider on local SQLCE store -->
      <node name="eventSql"
           provider="dasBlog.Storage.SqlServer.EventDataStorageProvider, dasBlog.Storage.SqlServer"
           initData="Data Source=.\SQLEXPRESS;AttachDbFilename=|DataDirectory|\dasBlogStorageSql.mdf;Integrated Security=True;User Instance=True"/>
      <!-- Stream provider on local file system -->
      <node name="streamNtfs"
           provider="dasBlog.Storage.Ntfs.StreamStorageProvider, dasBlog.Storage.Ntfs"
           initData=".\binaries"/>
    </nodes>
    <!-- Definition of Uri-Layouts for various content shapes (blog, album, forum) -->
    <uriLayouts>
      <!-- Local SQL CE blog -->
      <uriLayout name="localBlog">
        <segment role="posts" node="textSql">
          <segment role="comments" node="textSql">
            <segment role="pictures" node="streamNtfs"/>
          </segment>
          <segment role="media" node="streamNtfs">
            <segment role="comments" node="textSql"/>
          </segment>
          <segment role="enclosures" node="streamNtfs">
            <segment role="comments" node="textSql"/>
          </segment>
          <segment role="trackings" node="logSql"/>
        </segment>
        <segment role="media" node="streamNtfs"/>
        <segment role="trackings" node="logSql"/>
        <segment role="events" node="eventSql" />
      </uriLayout>
    </uriLayouts>
    <!-- Storage Bus Scopes -->
    <storageBus>
      <scope name="test.dasblog.info" uriLayout="localBlog"/>
    </storageBus>
  </dasBlog.Storage>
  <dasBlog.Runtime>
    <!-- Blog Service -->
    <blogDataService type="dasBlog.Services.Interop.StorageBusBlogDataService, newtelligence.DasBlog.Runtime"
                     contentLocation="test.dasblog.info"/>
    <!-- Log Service -->
    <logDataService type="dasBlog.Services.Interop.StorageBusLoggingService, newtelligence.DasBlog.Runtime"
                    contentLocation="test.dasblog.info"/>
    <!-- Event fan-out -->
    <eventNotifications client="relayEvents" clientCredential="relay" />
    <!-- Log fan-out -->
    <logNotifications client="relayLog" clientCredential="relay" />
  </dasBlog.Runtime>
</configuration>